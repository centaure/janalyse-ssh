#labels Featured
{{{

0.9.8 (2013-02-22)
 - jsch session is now configured with tcp keep alive of 2s
   (setServerAliveInterval(2000))
 - AIX sha1sum & md5sum fix.
 - new commands :
   + env
   + osid  (with new trait OS and objects AIX, Linux, Darwin, SunOS)
   + rm
   + rmdir
   + mkdir
   + arch
   + kill
 - new test cases 
 - "du" fix for AIX (not supporting -d or --max-depth option)
 - "ps" fix for AIX
 - SSHOptions new option : execWithPty = false (by default)
   tell if exec should use a virtual tty or not
   (Feature : ChannelExec use of virtual tty must be configurable, as without performance are quite better)
 - onejar subproject contains now a simplified launcher
   with default scala options :
   -Yrepl-sync -usejavacp
   -nocompdaemon -savecompiled
   -deprecation 


0.9.7 (2013-02-10)
 - scala >=2.10 is now mandatory
 - ChannelExec now is using a virtual tty by default
 - new commands : 
   + fsFreeSpace
   + fileRights
   + du
 - minor updates for darwin (mac os x) support
 - ps() command enhancements 
   + OS process modeling => LinuxProcess, AIXProcess, SunOSProcess, DarwinProcess
   + LinuxProcessState, DarwinProcessState
   + ps test case added
 - logging support added (using scala-logging)


0.9.6 (2013-01-07)
 - scala 2.10.0 support added


0.9.5-b3 (2012-11-26)
 - general transfert methods (available in SSH class) are now using automatic fallback, 
   if SCP fails, then SFTP will be tryied.


0.9.5-b2 (2012-11-05)
 - JSCH updated to 0.1.49
 - now using sbt 0.12.1
 - now using scalatest 2.0-M5
 - now using sbteclipse 2.1.0
 - now using sbt assembly 0.8.5
 - add support for scala 2.10.0-RC2
 - rexec.scala example script added 
 - Issue 1 Fixed: ssh keys reported by jendap
   SSHOptions new parameter : sshKeyFile: Option[String]=None, // if None, will look for default names. (sshUserDir is used)
 - new helper methods : 
   => ps : to get the list of running processes
   => cat file : to get the content of a file through the cat command.
      Useful when trying to get special linux file content 
 - remote2Local(host:String, hport:Int) without local port specified; 
   the port is automatically chosen and returned
 - get access to a remote SSH through current SSH session
   SSH.remote(options:SSHOptions):SSH
   SSH.remote(remotePort:Int, options:SSHOptions)
 - SSHOptions API CHANGE, a second parameter list have been added, host parameter moved from first one to the second one
   GOAL : Allow simple creation of partial function with SSHOptions, to share ssh options between several connections...
 - TransferOperations new methods :
   send(filename: String)
   receive(filename: String)
 - ShellOpterations new methods : 
   notExists(filename: String): Boolean
 - CommonOperations trait added, inherited by both TransfertOperations & ShellOperations
   define the following method :
   localmd5sum(filename:String):Option[String]
   

0.9.3
 - now using sbt-assembly 0.8.3
 - fixes relatives to implicit conversions with SSHPassword
 - fixes relatives to implicit conversion to SSHCommand and SSHBatch
 - For SSHBatch : execute, executeAndTrim, executeAndTrimSplit
     renamed to : executeAll, executeAllAndTrim, executeAllAndTrimSplit
 - Using Iterable instead of List
 - external (package) usage tests completed (ExternalSSHAPITest.scala)
 - small fix about how private key passphrase is taken into account (when pub-key auth is used)


0.9.2
 - date '+%Y-%m-%d %H:%M:%S %z' %z and %Z gives the same result on AIX, this result corresponds to linux %Z
   So modifying code to use %Z instead of %z.
   Now using GMT, "date -u '+%Y-%m-%d %H:%M:%S %Z'" in order to everything work well in all cases.
 - SSH.once(Option[SSHOptions]) fix linked to Option type result not at the right place
 - New test source file : ExternalSSHAPITest.scala => Testing the API from an external package 
 - Fixed : minor problem with script when invoking jajmx.SSH... or fr.janalyse.sh.SSH... without imports...
 

0.9.1
 - SSH tunneling fix, cleanup, and scaladocumented
 - Intricated SSH tunneling test added (self intrication, to simplify test case)
 

0.9.0
 - now using sbt-assembly 0.8.1
 - now using scalatest 0.8
 - SSHCommand, SSHBatch methods ! renamed to §§
 - new helper methods :
   test, exists, isFile, isDirectory, isExecutable 
 - findAfterDate & date helper fix !!
   Shell.date -> remote system time zone is now taken into account
 - Test cases fixes :
   Forcing parallelism to 6 ! for test case "Simultaenous SSH operations"
 - Code factorization :
   => ShellOperations trait added. Inherited by SSH and SSHShell.
   => TransferOperations trait added. Inherited by SSH and SSHFtp
 - SCP supported, for no-persistent transferts sessions, SCP is now used by default (instead of SFTP)
   (e.g. : SSH class transfert operation is now using SCP by default).
 - noneCipher switch added to SSHOptions for higher performance SCP transfert (true by default)
   (http://www.psc.edu/index.php/hpn-ssh)
 - transfert (receive) tests added
   Reference time on a local system: 500Mb using 5 SCP command (100Mb/cmd) takes on the same system 8.7s  (~62Mo/s by file)
   [info] - file transfert performances (with content loaded in memory)
   [info]   + Bytes rate : 38,6Mb/s 500Mb in 12,9s for 5 files - byterates using SCP 
   [info]   + Bytes rate : 44,9Mb/s 500Mb in 11,1s for 5 files - byterates using SCP (with none cipher) 
   [info]   + Bytes rate : 38,5Mb/s 500Mb in 13,0s for 5 files - byterates using SFTP 
   [info]   + Bytes rate : 46,0Mb/s 500Mb in 10,9s for 5 files - byterates using SFTP (with none cipher) 
   [info]   + Bytes rate : 39,5Mb/s 500Mb in 12,7s for 5 files - byterates using SFTP (session reused 
   [info]   + Bytes rate : 46,7Mb/s 500Mb in 10,7s for 5 files - byterates using SFTP (session reused, with none cipher) 
   [info]   + Bytes rate : 29,5Mb/s 500Mb in 16,9s for 500 files - byterates using SCP 
   [info]   + Bytes rate : 32,1Mb/s 500Mb in 15,6s for 500 files - byterates using SCP (with none cipher) 
   [info]   + Bytes rate : 26,7Mb/s 500Mb in 18,7s for 500 files - byterates using SFTP 
   [info]   + Bytes rate : 29,5Mb/s 500Mb in 16,9s for 500 files - byterates using SFTP (with none cipher) 
   [info]   + Bytes rate : 37,7Mb/s 500Mb in 13,3s for 500 files - byterates using SFTP (session reused) 
   [info]   + Bytes rate : 43,7Mb/s 500Mb in 11,4s for 500 files - byterates using SFTP (session reused, with none cipher) 
 - Code cleanup & Scaladocumenting
 - SSH compression now supported
 - For easier SSH Tunneling, new methods are now available :
   + def remote2Local(rport:Int, lhost:String, lport:Int)
   + def local2Remote(lport:Int, rhost:String, rport:Int) 
  

0.8.0
 - now using sbt 0.11.3
 - now using sbteclipse 2.1.0-RC1
 - Set of new method to help with commons remote commands :
   fileSize, md5sum, sha1sum, uname, ls, pwd, cd(*), hostname, date, findAfterDate
   (*) of course only for shell sessions 
 - JSCH updated to 0.1.48
 - md5sum method added to SSHTools object
 - manage well connect timeout (default = 30s) and general socket timeout (default = 5mn)


0.7.4 
 - SSHPassword toString method added (return the password)
 - updated for scala 2.9.2 support
 - scalatest 1.7.2
 - no more support for scala 2.8.1 & 2.8.2



0.7.3
 - JCSH updated to release 0.1.47
 - SSHOptions now contains an extra field "name" which allow user to friendly identify a remote ssh system
 - SSHOptions password type is now of SSHPassword type instead of String.
   Implicit conversions is provided from String, Option[String]
 - SSHShell batch method renamed to execute



0.7.2
 - added a package object jassh to define shortcuts to fr.janalyse.ssh.SSH class and object
 - SSHOptions, host parameter is now in first position !



0.7.1
 - fix big issue with SSHShell results separator process. => not seen using localhost tests => Must add remote tests !!



0.7.0
 - Added new method to SSH : newShell & newSftp for user to manage themselves shell and sftp session
 - Some internal changes to SSHExec class, in order to try to remove actor dependency. Mixing actors systems looks problematic
 - SSHShell new implementation, no more actors used, better performances and behavior, ... (throughput : 504 cmd/s using persistency)
 - SSHExec last result line is no longer lost
 - SSHOptions : new parameter : "prompt" to enable custom shell or console command to be use.
                prompt provide to SSHShell the way to separate command results
 - SSHOptions : connectionTimeout renamed into timeout
 - Various cleanup and enhancements
 - Tests : compare performances persistent SSHShell versus SSHExec  commands throughputs
 - SSH : Add an execute immediate method which rely on SSHExec, not SSHShell ! (throughput : 62cmd/s) 
         execOnce & execOnceAndTrim
 - SSHExec : Do not rely on DaemonActor/Actor anymore
 - SSHShell : Removed init Thread.sleep => Better performances (throughput : 37 cmd/s instead 1cmd/s)
 - SSH.connect becomes SSH.once
 - Removing apply in SSH class as it may encourage bad usage, and close not called

 

0.6.0
 - update jsch to 0.1.46
 - update sbteclipse plugin to 2.0.0
 - update sbtassembly plugin to 0.7.3
 - background ssh execution API changes (run method)
 - temporary hack to remove CPU overhead within run method


}}}